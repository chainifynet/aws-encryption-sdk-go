// Code generated by mockery. DO NOT EDIT.

//go:build mocks

package rand

import mock "github.com/stretchr/testify/mock"

// MockRandomGenerator is an autogenerated mock type for the RandomGenerator type
type MockRandomGenerator struct {
	mock.Mock
}

type MockRandomGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRandomGenerator) EXPECT() *MockRandomGenerator_Expecter {
	return &MockRandomGenerator_Expecter{mock: &_m.Mock}
}

// CryptoRandomBytes provides a mock function with given fields: m
func (_m *MockRandomGenerator) CryptoRandomBytes(m int) ([]byte, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CryptoRandomBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRandomGenerator_CryptoRandomBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CryptoRandomBytes'
type MockRandomGenerator_CryptoRandomBytes_Call struct {
	*mock.Call
}

// CryptoRandomBytes is a helper method to define mock.On call
//   - m int
func (_e *MockRandomGenerator_Expecter) CryptoRandomBytes(m interface{}) *MockRandomGenerator_CryptoRandomBytes_Call {
	return &MockRandomGenerator_CryptoRandomBytes_Call{Call: _e.mock.On("CryptoRandomBytes", m)}
}

func (_c *MockRandomGenerator_CryptoRandomBytes_Call) Run(run func(m int)) *MockRandomGenerator_CryptoRandomBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRandomGenerator_CryptoRandomBytes_Call) Return(_a0 []byte, _a1 error) *MockRandomGenerator_CryptoRandomBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRandomGenerator_CryptoRandomBytes_Call) RunAndReturn(run func(int) ([]byte, error)) *MockRandomGenerator_CryptoRandomBytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRandomGenerator creates a new instance of MockRandomGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRandomGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRandomGenerator {
	mock := &MockRandomGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
