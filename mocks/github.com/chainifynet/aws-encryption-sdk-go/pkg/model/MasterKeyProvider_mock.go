// Code generated by mockery. DO NOT EDIT.

//go:build mocks

package model

import (
	context "context"

	model "github.com/chainifynet/aws-encryption-sdk-go/pkg/model"
	mock "github.com/stretchr/testify/mock"

	suite "github.com/chainifynet/aws-encryption-sdk-go/pkg/suite"

	types "github.com/chainifynet/aws-encryption-sdk-go/pkg/model/types"
)

// MockMasterKeyProvider is an autogenerated mock type for the MasterKeyProvider type
type MockMasterKeyProvider struct {
	mock.Mock
}

type MockMasterKeyProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMasterKeyProvider) EXPECT() *MockMasterKeyProvider_Expecter {
	return &MockMasterKeyProvider_Expecter{mock: &_m.Mock}
}

// AddMasterKey provides a mock function with given fields: keyID
func (_m *MockMasterKeyProvider) AddMasterKey(keyID string) (model.MasterKey, error) {
	ret := _m.Called(keyID)

	if len(ret) == 0 {
		panic("no return value specified for AddMasterKey")
	}

	var r0 model.MasterKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.MasterKey, error)); ok {
		return rf(keyID)
	}
	if rf, ok := ret.Get(0).(func(string) model.MasterKey); ok {
		r0 = rf(keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.MasterKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMasterKeyProvider_AddMasterKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMasterKey'
type MockMasterKeyProvider_AddMasterKey_Call struct {
	*mock.Call
}

// AddMasterKey is a helper method to define mock.On call
//   - keyID string
func (_e *MockMasterKeyProvider_Expecter) AddMasterKey(keyID interface{}) *MockMasterKeyProvider_AddMasterKey_Call {
	return &MockMasterKeyProvider_AddMasterKey_Call{Call: _e.mock.On("AddMasterKey", keyID)}
}

func (_c *MockMasterKeyProvider_AddMasterKey_Call) Run(run func(keyID string)) *MockMasterKeyProvider_AddMasterKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMasterKeyProvider_AddMasterKey_Call) Return(_a0 model.MasterKey, _a1 error) *MockMasterKeyProvider_AddMasterKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMasterKeyProvider_AddMasterKey_Call) RunAndReturn(run func(string) (model.MasterKey, error)) *MockMasterKeyProvider_AddMasterKey_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptDataKey provides a mock function with given fields: ctx, encryptedDataKey, alg, ec
func (_m *MockMasterKeyProvider) DecryptDataKey(ctx context.Context, encryptedDataKey model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext) (model.DataKeyI, error) {
	ret := _m.Called(ctx, encryptedDataKey, alg, ec)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKey")
	}

	var r0 model.DataKeyI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)); ok {
		return rf(ctx, encryptedDataKey, alg, ec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) model.DataKeyI); ok {
		r0 = rf(ctx, encryptedDataKey, alg, ec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.DataKeyI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) error); ok {
		r1 = rf(ctx, encryptedDataKey, alg, ec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMasterKeyProvider_DecryptDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKey'
type MockMasterKeyProvider_DecryptDataKey_Call struct {
	*mock.Call
}

// DecryptDataKey is a helper method to define mock.On call
//   - ctx context.Context
//   - encryptedDataKey model.EncryptedDataKeyI
//   - alg *suite.AlgorithmSuite
//   - ec suite.EncryptionContext
func (_e *MockMasterKeyProvider_Expecter) DecryptDataKey(ctx interface{}, encryptedDataKey interface{}, alg interface{}, ec interface{}) *MockMasterKeyProvider_DecryptDataKey_Call {
	return &MockMasterKeyProvider_DecryptDataKey_Call{Call: _e.mock.On("DecryptDataKey", ctx, encryptedDataKey, alg, ec)}
}

func (_c *MockMasterKeyProvider_DecryptDataKey_Call) Run(run func(ctx context.Context, encryptedDataKey model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext)) *MockMasterKeyProvider_DecryptDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.EncryptedDataKeyI), args[2].(*suite.AlgorithmSuite), args[3].(suite.EncryptionContext))
	})
	return _c
}

func (_c *MockMasterKeyProvider_DecryptDataKey_Call) Return(_a0 model.DataKeyI, _a1 error) *MockMasterKeyProvider_DecryptDataKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMasterKeyProvider_DecryptDataKey_Call) RunAndReturn(run func(context.Context, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)) *MockMasterKeyProvider_DecryptDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptDataKeyFromList provides a mock function with given fields: ctx, encryptedDataKeys, alg, ec
func (_m *MockMasterKeyProvider) DecryptDataKeyFromList(ctx context.Context, encryptedDataKeys []model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext) (model.DataKeyI, error) {
	ret := _m.Called(ctx, encryptedDataKeys, alg, ec)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKeyFromList")
	}

	var r0 model.DataKeyI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)); ok {
		return rf(ctx, encryptedDataKeys, alg, ec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) model.DataKeyI); ok {
		r0 = rf(ctx, encryptedDataKeys, alg, ec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.DataKeyI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) error); ok {
		r1 = rf(ctx, encryptedDataKeys, alg, ec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMasterKeyProvider_DecryptDataKeyFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKeyFromList'
type MockMasterKeyProvider_DecryptDataKeyFromList_Call struct {
	*mock.Call
}

// DecryptDataKeyFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - encryptedDataKeys []model.EncryptedDataKeyI
//   - alg *suite.AlgorithmSuite
//   - ec suite.EncryptionContext
func (_e *MockMasterKeyProvider_Expecter) DecryptDataKeyFromList(ctx interface{}, encryptedDataKeys interface{}, alg interface{}, ec interface{}) *MockMasterKeyProvider_DecryptDataKeyFromList_Call {
	return &MockMasterKeyProvider_DecryptDataKeyFromList_Call{Call: _e.mock.On("DecryptDataKeyFromList", ctx, encryptedDataKeys, alg, ec)}
}

func (_c *MockMasterKeyProvider_DecryptDataKeyFromList_Call) Run(run func(ctx context.Context, encryptedDataKeys []model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext)) *MockMasterKeyProvider_DecryptDataKeyFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.EncryptedDataKeyI), args[2].(*suite.AlgorithmSuite), args[3].(suite.EncryptionContext))
	})
	return _c
}

func (_c *MockMasterKeyProvider_DecryptDataKeyFromList_Call) Return(_a0 model.DataKeyI, _a1 error) *MockMasterKeyProvider_DecryptDataKeyFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMasterKeyProvider_DecryptDataKeyFromList_Call) RunAndReturn(run func(context.Context, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)) *MockMasterKeyProvider_DecryptDataKeyFromList_Call {
	_c.Call.Return(run)
	return _c
}

// MasterKeyForDecrypt provides a mock function with given fields: ctx, metadata
func (_m *MockMasterKeyProvider) MasterKeyForDecrypt(ctx context.Context, metadata model.KeyMeta) (model.MasterKey, error) {
	ret := _m.Called(ctx, metadata)

	if len(ret) == 0 {
		panic("no return value specified for MasterKeyForDecrypt")
	}

	var r0 model.MasterKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.KeyMeta) (model.MasterKey, error)); ok {
		return rf(ctx, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.KeyMeta) model.MasterKey); ok {
		r0 = rf(ctx, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.MasterKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.KeyMeta) error); ok {
		r1 = rf(ctx, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMasterKeyProvider_MasterKeyForDecrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MasterKeyForDecrypt'
type MockMasterKeyProvider_MasterKeyForDecrypt_Call struct {
	*mock.Call
}

// MasterKeyForDecrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata model.KeyMeta
func (_e *MockMasterKeyProvider_Expecter) MasterKeyForDecrypt(ctx interface{}, metadata interface{}) *MockMasterKeyProvider_MasterKeyForDecrypt_Call {
	return &MockMasterKeyProvider_MasterKeyForDecrypt_Call{Call: _e.mock.On("MasterKeyForDecrypt", ctx, metadata)}
}

func (_c *MockMasterKeyProvider_MasterKeyForDecrypt_Call) Run(run func(ctx context.Context, metadata model.KeyMeta)) *MockMasterKeyProvider_MasterKeyForDecrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.KeyMeta))
	})
	return _c
}

func (_c *MockMasterKeyProvider_MasterKeyForDecrypt_Call) Return(_a0 model.MasterKey, _a1 error) *MockMasterKeyProvider_MasterKeyForDecrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMasterKeyProvider_MasterKeyForDecrypt_Call) RunAndReturn(run func(context.Context, model.KeyMeta) (model.MasterKey, error)) *MockMasterKeyProvider_MasterKeyForDecrypt_Call {
	_c.Call.Return(run)
	return _c
}

// MasterKeysForDecryption provides a mock function with given fields:
func (_m *MockMasterKeyProvider) MasterKeysForDecryption() []model.MasterKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MasterKeysForDecryption")
	}

	var r0 []model.MasterKey
	if rf, ok := ret.Get(0).(func() []model.MasterKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MasterKey)
		}
	}

	return r0
}

// MockMasterKeyProvider_MasterKeysForDecryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MasterKeysForDecryption'
type MockMasterKeyProvider_MasterKeysForDecryption_Call struct {
	*mock.Call
}

// MasterKeysForDecryption is a helper method to define mock.On call
func (_e *MockMasterKeyProvider_Expecter) MasterKeysForDecryption() *MockMasterKeyProvider_MasterKeysForDecryption_Call {
	return &MockMasterKeyProvider_MasterKeysForDecryption_Call{Call: _e.mock.On("MasterKeysForDecryption")}
}

func (_c *MockMasterKeyProvider_MasterKeysForDecryption_Call) Run(run func()) *MockMasterKeyProvider_MasterKeysForDecryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMasterKeyProvider_MasterKeysForDecryption_Call) Return(_a0 []model.MasterKey) *MockMasterKeyProvider_MasterKeysForDecryption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMasterKeyProvider_MasterKeysForDecryption_Call) RunAndReturn(run func() []model.MasterKey) *MockMasterKeyProvider_MasterKeysForDecryption_Call {
	_c.Call.Return(run)
	return _c
}

// MasterKeysForEncryption provides a mock function with given fields: ctx, ec
func (_m *MockMasterKeyProvider) MasterKeysForEncryption(ctx context.Context, ec suite.EncryptionContext) (model.MasterKey, []model.MasterKey, error) {
	ret := _m.Called(ctx, ec)

	if len(ret) == 0 {
		panic("no return value specified for MasterKeysForEncryption")
	}

	var r0 model.MasterKey
	var r1 []model.MasterKey
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, suite.EncryptionContext) (model.MasterKey, []model.MasterKey, error)); ok {
		return rf(ctx, ec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, suite.EncryptionContext) model.MasterKey); ok {
		r0 = rf(ctx, ec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.MasterKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, suite.EncryptionContext) []model.MasterKey); ok {
		r1 = rf(ctx, ec)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.MasterKey)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, suite.EncryptionContext) error); ok {
		r2 = rf(ctx, ec)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMasterKeyProvider_MasterKeysForEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MasterKeysForEncryption'
type MockMasterKeyProvider_MasterKeysForEncryption_Call struct {
	*mock.Call
}

// MasterKeysForEncryption is a helper method to define mock.On call
//   - ctx context.Context
//   - ec suite.EncryptionContext
func (_e *MockMasterKeyProvider_Expecter) MasterKeysForEncryption(ctx interface{}, ec interface{}) *MockMasterKeyProvider_MasterKeysForEncryption_Call {
	return &MockMasterKeyProvider_MasterKeysForEncryption_Call{Call: _e.mock.On("MasterKeysForEncryption", ctx, ec)}
}

func (_c *MockMasterKeyProvider_MasterKeysForEncryption_Call) Run(run func(ctx context.Context, ec suite.EncryptionContext)) *MockMasterKeyProvider_MasterKeysForEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(suite.EncryptionContext))
	})
	return _c
}

func (_c *MockMasterKeyProvider_MasterKeysForEncryption_Call) Return(_a0 model.MasterKey, _a1 []model.MasterKey, _a2 error) *MockMasterKeyProvider_MasterKeysForEncryption_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMasterKeyProvider_MasterKeysForEncryption_Call) RunAndReturn(run func(context.Context, suite.EncryptionContext) (model.MasterKey, []model.MasterKey, error)) *MockMasterKeyProvider_MasterKeysForEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// NewMasterKey provides a mock function with given fields: ctx, keyID
func (_m *MockMasterKeyProvider) NewMasterKey(ctx context.Context, keyID string) (model.MasterKey, error) {
	ret := _m.Called(ctx, keyID)

	if len(ret) == 0 {
		panic("no return value specified for NewMasterKey")
	}

	var r0 model.MasterKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.MasterKey, error)); ok {
		return rf(ctx, keyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.MasterKey); ok {
		r0 = rf(ctx, keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.MasterKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMasterKeyProvider_NewMasterKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMasterKey'
type MockMasterKeyProvider_NewMasterKey_Call struct {
	*mock.Call
}

// NewMasterKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
func (_e *MockMasterKeyProvider_Expecter) NewMasterKey(ctx interface{}, keyID interface{}) *MockMasterKeyProvider_NewMasterKey_Call {
	return &MockMasterKeyProvider_NewMasterKey_Call{Call: _e.mock.On("NewMasterKey", ctx, keyID)}
}

func (_c *MockMasterKeyProvider_NewMasterKey_Call) Run(run func(ctx context.Context, keyID string)) *MockMasterKeyProvider_NewMasterKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMasterKeyProvider_NewMasterKey_Call) Return(_a0 model.MasterKey, _a1 error) *MockMasterKeyProvider_NewMasterKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMasterKeyProvider_NewMasterKey_Call) RunAndReturn(run func(context.Context, string) (model.MasterKey, error)) *MockMasterKeyProvider_NewMasterKey_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderID provides a mock function with given fields:
func (_m *MockMasterKeyProvider) ProviderID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProviderID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMasterKeyProvider_ProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderID'
type MockMasterKeyProvider_ProviderID_Call struct {
	*mock.Call
}

// ProviderID is a helper method to define mock.On call
func (_e *MockMasterKeyProvider_Expecter) ProviderID() *MockMasterKeyProvider_ProviderID_Call {
	return &MockMasterKeyProvider_ProviderID_Call{Call: _e.mock.On("ProviderID")}
}

func (_c *MockMasterKeyProvider_ProviderID_Call) Run(run func()) *MockMasterKeyProvider_ProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMasterKeyProvider_ProviderID_Call) Return(_a0 string) *MockMasterKeyProvider_ProviderID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMasterKeyProvider_ProviderID_Call) RunAndReturn(run func() string) *MockMasterKeyProvider_ProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderKind provides a mock function with given fields:
func (_m *MockMasterKeyProvider) ProviderKind() types.ProviderKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProviderKind")
	}

	var r0 types.ProviderKind
	if rf, ok := ret.Get(0).(func() types.ProviderKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ProviderKind)
	}

	return r0
}

// MockMasterKeyProvider_ProviderKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderKind'
type MockMasterKeyProvider_ProviderKind_Call struct {
	*mock.Call
}

// ProviderKind is a helper method to define mock.On call
func (_e *MockMasterKeyProvider_Expecter) ProviderKind() *MockMasterKeyProvider_ProviderKind_Call {
	return &MockMasterKeyProvider_ProviderKind_Call{Call: _e.mock.On("ProviderKind")}
}

func (_c *MockMasterKeyProvider_ProviderKind_Call) Run(run func()) *MockMasterKeyProvider_ProviderKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMasterKeyProvider_ProviderKind_Call) Return(_a0 types.ProviderKind) *MockMasterKeyProvider_ProviderKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMasterKeyProvider_ProviderKind_Call) RunAndReturn(run func() types.ProviderKind) *MockMasterKeyProvider_ProviderKind_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMasterKey provides a mock function with given fields: keyID
func (_m *MockMasterKeyProvider) ValidateMasterKey(keyID string) error {
	ret := _m.Called(keyID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMasterKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMasterKeyProvider_ValidateMasterKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMasterKey'
type MockMasterKeyProvider_ValidateMasterKey_Call struct {
	*mock.Call
}

// ValidateMasterKey is a helper method to define mock.On call
//   - keyID string
func (_e *MockMasterKeyProvider_Expecter) ValidateMasterKey(keyID interface{}) *MockMasterKeyProvider_ValidateMasterKey_Call {
	return &MockMasterKeyProvider_ValidateMasterKey_Call{Call: _e.mock.On("ValidateMasterKey", keyID)}
}

func (_c *MockMasterKeyProvider_ValidateMasterKey_Call) Run(run func(keyID string)) *MockMasterKeyProvider_ValidateMasterKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMasterKeyProvider_ValidateMasterKey_Call) Return(_a0 error) *MockMasterKeyProvider_ValidateMasterKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMasterKeyProvider_ValidateMasterKey_Call) RunAndReturn(run func(string) error) *MockMasterKeyProvider_ValidateMasterKey_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProviderID provides a mock function with given fields: otherID
func (_m *MockMasterKeyProvider) ValidateProviderID(otherID string) error {
	ret := _m.Called(otherID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProviderID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(otherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMasterKeyProvider_ValidateProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProviderID'
type MockMasterKeyProvider_ValidateProviderID_Call struct {
	*mock.Call
}

// ValidateProviderID is a helper method to define mock.On call
//   - otherID string
func (_e *MockMasterKeyProvider_Expecter) ValidateProviderID(otherID interface{}) *MockMasterKeyProvider_ValidateProviderID_Call {
	return &MockMasterKeyProvider_ValidateProviderID_Call{Call: _e.mock.On("ValidateProviderID", otherID)}
}

func (_c *MockMasterKeyProvider_ValidateProviderID_Call) Run(run func(otherID string)) *MockMasterKeyProvider_ValidateProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMasterKeyProvider_ValidateProviderID_Call) Return(_a0 error) *MockMasterKeyProvider_ValidateProviderID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMasterKeyProvider_ValidateProviderID_Call) RunAndReturn(run func(string) error) *MockMasterKeyProvider_ValidateProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMasterKeyProvider creates a new instance of MockMasterKeyProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMasterKeyProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMasterKeyProvider {
	mock := &MockMasterKeyProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
