// Code generated by mockery. DO NOT EDIT.

//go:build mocks

package model

import (
	time "time"

	model "github.com/chainifynet/aws-encryption-sdk-go/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// DeleteEntry provides a mock function with given fields: key
func (_m *MockCache) DeleteEntry(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntry")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCache_DeleteEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntry'
type MockCache_DeleteEntry_Call struct {
	*mock.Call
}

// DeleteEntry is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter) DeleteEntry(key interface{}) *MockCache_DeleteEntry_Call {
	return &MockCache_DeleteEntry_Call{Call: _e.mock.On("DeleteEntry", key)}
}

func (_c *MockCache_DeleteEntry_Call) Run(run func(key string)) *MockCache_DeleteEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_DeleteEntry_Call) Return(_a0 bool) *MockCache_DeleteEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_DeleteEntry_Call) RunAndReturn(run func(string) bool) *MockCache_DeleteEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetDecryptionEntry provides a mock function with given fields: key
func (_m *MockCache) GetDecryptionEntry(key string) (model.CacheEntry, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDecryptionEntry")
	}

	var r0 model.CacheEntry
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (model.CacheEntry, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) model.CacheEntry); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CacheEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_GetDecryptionEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecryptionEntry'
type MockCache_GetDecryptionEntry_Call struct {
	*mock.Call
}

// GetDecryptionEntry is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter) GetDecryptionEntry(key interface{}) *MockCache_GetDecryptionEntry_Call {
	return &MockCache_GetDecryptionEntry_Call{Call: _e.mock.On("GetDecryptionEntry", key)}
}

func (_c *MockCache_GetDecryptionEntry_Call) Run(run func(key string)) *MockCache_GetDecryptionEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_GetDecryptionEntry_Call) Return(_a0 model.CacheEntry, _a1 bool) *MockCache_GetDecryptionEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetDecryptionEntry_Call) RunAndReturn(run func(string) (model.CacheEntry, bool)) *MockCache_GetDecryptionEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetEncryptionEntry provides a mock function with given fields: key, n
func (_m *MockCache) GetEncryptionEntry(key string, n int) (model.CacheEntry, bool) {
	ret := _m.Called(key, n)

	if len(ret) == 0 {
		panic("no return value specified for GetEncryptionEntry")
	}

	var r0 model.CacheEntry
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, int) (model.CacheEntry, bool)); ok {
		return rf(key, n)
	}
	if rf, ok := ret.Get(0).(func(string, int) model.CacheEntry); ok {
		r0 = rf(key, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CacheEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) bool); ok {
		r1 = rf(key, n)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_GetEncryptionEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEncryptionEntry'
type MockCache_GetEncryptionEntry_Call struct {
	*mock.Call
}

// GetEncryptionEntry is a helper method to define mock.On call
//   - key string
//   - n int
func (_e *MockCache_Expecter) GetEncryptionEntry(key interface{}, n interface{}) *MockCache_GetEncryptionEntry_Call {
	return &MockCache_GetEncryptionEntry_Call{Call: _e.mock.On("GetEncryptionEntry", key, n)}
}

func (_c *MockCache_GetEncryptionEntry_Call) Run(run func(key string, n int)) *MockCache_GetEncryptionEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockCache_GetEncryptionEntry_Call) Return(_a0 model.CacheEntry, _a1 bool) *MockCache_GetEncryptionEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetEncryptionEntry_Call) RunAndReturn(run func(string, int) (model.CacheEntry, bool)) *MockCache_GetEncryptionEntry_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *MockCache) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCache_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockCache_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockCache_Expecter) Len() *MockCache_Len_Call {
	return &MockCache_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockCache_Len_Call) Run(run func()) *MockCache_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Len_Call) Return(_a0 int) *MockCache_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Len_Call) RunAndReturn(run func() int) *MockCache_Len_Call {
	_c.Call.Return(run)
	return _c
}

// PutDecryptionEntry provides a mock function with given fields: key, dm, lifetime
func (_m *MockCache) PutDecryptionEntry(key string, dm model.DecryptionMaterial, lifetime time.Duration) model.CacheEntry {
	ret := _m.Called(key, dm, lifetime)

	if len(ret) == 0 {
		panic("no return value specified for PutDecryptionEntry")
	}

	var r0 model.CacheEntry
	if rf, ok := ret.Get(0).(func(string, model.DecryptionMaterial, time.Duration) model.CacheEntry); ok {
		r0 = rf(key, dm, lifetime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CacheEntry)
		}
	}

	return r0
}

// MockCache_PutDecryptionEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDecryptionEntry'
type MockCache_PutDecryptionEntry_Call struct {
	*mock.Call
}

// PutDecryptionEntry is a helper method to define mock.On call
//   - key string
//   - dm model.DecryptionMaterial
//   - lifetime time.Duration
func (_e *MockCache_Expecter) PutDecryptionEntry(key interface{}, dm interface{}, lifetime interface{}) *MockCache_PutDecryptionEntry_Call {
	return &MockCache_PutDecryptionEntry_Call{Call: _e.mock.On("PutDecryptionEntry", key, dm, lifetime)}
}

func (_c *MockCache_PutDecryptionEntry_Call) Run(run func(key string, dm model.DecryptionMaterial, lifetime time.Duration)) *MockCache_PutDecryptionEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.DecryptionMaterial), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCache_PutDecryptionEntry_Call) Return(_a0 model.CacheEntry) *MockCache_PutDecryptionEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_PutDecryptionEntry_Call) RunAndReturn(run func(string, model.DecryptionMaterial, time.Duration) model.CacheEntry) *MockCache_PutDecryptionEntry_Call {
	_c.Call.Return(run)
	return _c
}

// PutEncryptionEntry provides a mock function with given fields: key, em, n, lifetime
func (_m *MockCache) PutEncryptionEntry(key string, em model.EncryptionMaterial, n int, lifetime time.Duration) model.CacheEntry {
	ret := _m.Called(key, em, n, lifetime)

	if len(ret) == 0 {
		panic("no return value specified for PutEncryptionEntry")
	}

	var r0 model.CacheEntry
	if rf, ok := ret.Get(0).(func(string, model.EncryptionMaterial, int, time.Duration) model.CacheEntry); ok {
		r0 = rf(key, em, n, lifetime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CacheEntry)
		}
	}

	return r0
}

// MockCache_PutEncryptionEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutEncryptionEntry'
type MockCache_PutEncryptionEntry_Call struct {
	*mock.Call
}

// PutEncryptionEntry is a helper method to define mock.On call
//   - key string
//   - em model.EncryptionMaterial
//   - n int
//   - lifetime time.Duration
func (_e *MockCache_Expecter) PutEncryptionEntry(key interface{}, em interface{}, n interface{}, lifetime interface{}) *MockCache_PutEncryptionEntry_Call {
	return &MockCache_PutEncryptionEntry_Call{Call: _e.mock.On("PutEncryptionEntry", key, em, n, lifetime)}
}

func (_c *MockCache_PutEncryptionEntry_Call) Run(run func(key string, em model.EncryptionMaterial, n int, lifetime time.Duration)) *MockCache_PutEncryptionEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.EncryptionMaterial), args[2].(int), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCache_PutEncryptionEntry_Call) Return(_a0 model.CacheEntry) *MockCache_PutEncryptionEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_PutEncryptionEntry_Call) RunAndReturn(run func(string, model.EncryptionMaterial, int, time.Duration) model.CacheEntry) *MockCache_PutEncryptionEntry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
