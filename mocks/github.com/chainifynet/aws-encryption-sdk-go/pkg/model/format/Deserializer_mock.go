// Code generated by mockery v2.49.1. DO NOT EDIT.

//go:build mocks

package format

import (
	bytes "bytes"

	format "github.com/chainifynet/aws-encryption-sdk-go/pkg/model/format"
	mock "github.com/stretchr/testify/mock"

	suite "github.com/chainifynet/aws-encryption-sdk-go/pkg/suite"
)

// MockDeserializer is an autogenerated mock type for the Deserializer type
type MockDeserializer struct {
	mock.Mock
}

type MockDeserializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeserializer) EXPECT() *MockDeserializer_Expecter {
	return &MockDeserializer_Expecter{mock: &_m.Mock}
}

// DeserializeBody provides a mock function with given fields: buf, alg, frameLen
func (_m *MockDeserializer) DeserializeBody(buf *bytes.Buffer, alg *suite.AlgorithmSuite, frameLen int) (format.MessageBody, error) {
	ret := _m.Called(buf, alg, frameLen)

	if len(ret) == 0 {
		panic("no return value specified for DeserializeBody")
	}

	var r0 format.MessageBody
	var r1 error
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, *suite.AlgorithmSuite, int) (format.MessageBody, error)); ok {
		return rf(buf, alg, frameLen)
	}
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, *suite.AlgorithmSuite, int) format.MessageBody); ok {
		r0 = rf(buf, alg, frameLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(format.MessageBody)
		}
	}

	if rf, ok := ret.Get(1).(func(*bytes.Buffer, *suite.AlgorithmSuite, int) error); ok {
		r1 = rf(buf, alg, frameLen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeserializer_DeserializeBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeserializeBody'
type MockDeserializer_DeserializeBody_Call struct {
	*mock.Call
}

// DeserializeBody is a helper method to define mock.On call
//   - buf *bytes.Buffer
//   - alg *suite.AlgorithmSuite
//   - frameLen int
func (_e *MockDeserializer_Expecter) DeserializeBody(buf interface{}, alg interface{}, frameLen interface{}) *MockDeserializer_DeserializeBody_Call {
	return &MockDeserializer_DeserializeBody_Call{Call: _e.mock.On("DeserializeBody", buf, alg, frameLen)}
}

func (_c *MockDeserializer_DeserializeBody_Call) Run(run func(buf *bytes.Buffer, alg *suite.AlgorithmSuite, frameLen int)) *MockDeserializer_DeserializeBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bytes.Buffer), args[1].(*suite.AlgorithmSuite), args[2].(int))
	})
	return _c
}

func (_c *MockDeserializer_DeserializeBody_Call) Return(_a0 format.MessageBody, _a1 error) *MockDeserializer_DeserializeBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeserializer_DeserializeBody_Call) RunAndReturn(run func(*bytes.Buffer, *suite.AlgorithmSuite, int) (format.MessageBody, error)) *MockDeserializer_DeserializeBody_Call {
	_c.Call.Return(run)
	return _c
}

// DeserializeFooter provides a mock function with given fields: buf, alg
func (_m *MockDeserializer) DeserializeFooter(buf *bytes.Buffer, alg *suite.AlgorithmSuite) (format.MessageFooter, error) {
	ret := _m.Called(buf, alg)

	if len(ret) == 0 {
		panic("no return value specified for DeserializeFooter")
	}

	var r0 format.MessageFooter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, *suite.AlgorithmSuite) (format.MessageFooter, error)); ok {
		return rf(buf, alg)
	}
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, *suite.AlgorithmSuite) format.MessageFooter); ok {
		r0 = rf(buf, alg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(format.MessageFooter)
		}
	}

	if rf, ok := ret.Get(1).(func(*bytes.Buffer, *suite.AlgorithmSuite) error); ok {
		r1 = rf(buf, alg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeserializer_DeserializeFooter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeserializeFooter'
type MockDeserializer_DeserializeFooter_Call struct {
	*mock.Call
}

// DeserializeFooter is a helper method to define mock.On call
//   - buf *bytes.Buffer
//   - alg *suite.AlgorithmSuite
func (_e *MockDeserializer_Expecter) DeserializeFooter(buf interface{}, alg interface{}) *MockDeserializer_DeserializeFooter_Call {
	return &MockDeserializer_DeserializeFooter_Call{Call: _e.mock.On("DeserializeFooter", buf, alg)}
}

func (_c *MockDeserializer_DeserializeFooter_Call) Run(run func(buf *bytes.Buffer, alg *suite.AlgorithmSuite)) *MockDeserializer_DeserializeFooter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bytes.Buffer), args[1].(*suite.AlgorithmSuite))
	})
	return _c
}

func (_c *MockDeserializer_DeserializeFooter_Call) Return(_a0 format.MessageFooter, _a1 error) *MockDeserializer_DeserializeFooter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeserializer_DeserializeFooter_Call) RunAndReturn(run func(*bytes.Buffer, *suite.AlgorithmSuite) (format.MessageFooter, error)) *MockDeserializer_DeserializeFooter_Call {
	_c.Call.Return(run)
	return _c
}

// DeserializeHeader provides a mock function with given fields: buf, maxEncryptedDataKeys
func (_m *MockDeserializer) DeserializeHeader(buf *bytes.Buffer, maxEncryptedDataKeys int) (format.MessageHeader, format.MessageHeaderAuth, error) {
	ret := _m.Called(buf, maxEncryptedDataKeys)

	if len(ret) == 0 {
		panic("no return value specified for DeserializeHeader")
	}

	var r0 format.MessageHeader
	var r1 format.MessageHeaderAuth
	var r2 error
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, int) (format.MessageHeader, format.MessageHeaderAuth, error)); ok {
		return rf(buf, maxEncryptedDataKeys)
	}
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, int) format.MessageHeader); ok {
		r0 = rf(buf, maxEncryptedDataKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(format.MessageHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(*bytes.Buffer, int) format.MessageHeaderAuth); ok {
		r1 = rf(buf, maxEncryptedDataKeys)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(format.MessageHeaderAuth)
		}
	}

	if rf, ok := ret.Get(2).(func(*bytes.Buffer, int) error); ok {
		r2 = rf(buf, maxEncryptedDataKeys)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDeserializer_DeserializeHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeserializeHeader'
type MockDeserializer_DeserializeHeader_Call struct {
	*mock.Call
}

// DeserializeHeader is a helper method to define mock.On call
//   - buf *bytes.Buffer
//   - maxEncryptedDataKeys int
func (_e *MockDeserializer_Expecter) DeserializeHeader(buf interface{}, maxEncryptedDataKeys interface{}) *MockDeserializer_DeserializeHeader_Call {
	return &MockDeserializer_DeserializeHeader_Call{Call: _e.mock.On("DeserializeHeader", buf, maxEncryptedDataKeys)}
}

func (_c *MockDeserializer_DeserializeHeader_Call) Run(run func(buf *bytes.Buffer, maxEncryptedDataKeys int)) *MockDeserializer_DeserializeHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bytes.Buffer), args[1].(int))
	})
	return _c
}

func (_c *MockDeserializer_DeserializeHeader_Call) Return(_a0 format.MessageHeader, _a1 format.MessageHeaderAuth, _a2 error) *MockDeserializer_DeserializeHeader_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDeserializer_DeserializeHeader_Call) RunAndReturn(run func(*bytes.Buffer, int) (format.MessageHeader, format.MessageHeaderAuth, error)) *MockDeserializer_DeserializeHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeserializer creates a new instance of MockDeserializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeserializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeserializer {
	mock := &MockDeserializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
