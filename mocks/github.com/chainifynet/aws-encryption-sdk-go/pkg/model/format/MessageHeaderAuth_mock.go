// Code generated by mockery v2.49.1. DO NOT EDIT.

//go:build mocks

package format

import mock "github.com/stretchr/testify/mock"

// MockMessageHeaderAuth is an autogenerated mock type for the MessageHeaderAuth type
type MockMessageHeaderAuth struct {
	mock.Mock
}

type MockMessageHeaderAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageHeaderAuth) EXPECT() *MockMessageHeaderAuth_Expecter {
	return &MockMessageHeaderAuth_Expecter{mock: &_m.Mock}
}

// AuthData provides a mock function with given fields:
func (_m *MockMessageHeaderAuth) AuthData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessageHeaderAuth_AuthData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthData'
type MockMessageHeaderAuth_AuthData_Call struct {
	*mock.Call
}

// AuthData is a helper method to define mock.On call
func (_e *MockMessageHeaderAuth_Expecter) AuthData() *MockMessageHeaderAuth_AuthData_Call {
	return &MockMessageHeaderAuth_AuthData_Call{Call: _e.mock.On("AuthData")}
}

func (_c *MockMessageHeaderAuth_AuthData_Call) Run(run func()) *MockMessageHeaderAuth_AuthData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageHeaderAuth_AuthData_Call) Return(_a0 []byte) *MockMessageHeaderAuth_AuthData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageHeaderAuth_AuthData_Call) RunAndReturn(run func() []byte) *MockMessageHeaderAuth_AuthData_Call {
	_c.Call.Return(run)
	return _c
}

// Bytes provides a mock function with given fields:
func (_m *MockMessageHeaderAuth) Bytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessageHeaderAuth_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockMessageHeaderAuth_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockMessageHeaderAuth_Expecter) Bytes() *MockMessageHeaderAuth_Bytes_Call {
	return &MockMessageHeaderAuth_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockMessageHeaderAuth_Bytes_Call) Run(run func()) *MockMessageHeaderAuth_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageHeaderAuth_Bytes_Call) Return(_a0 []byte) *MockMessageHeaderAuth_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageHeaderAuth_Bytes_Call) RunAndReturn(run func() []byte) *MockMessageHeaderAuth_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// IV provides a mock function with given fields:
func (_m *MockMessageHeaderAuth) IV() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IV")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessageHeaderAuth_IV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IV'
type MockMessageHeaderAuth_IV_Call struct {
	*mock.Call
}

// IV is a helper method to define mock.On call
func (_e *MockMessageHeaderAuth_Expecter) IV() *MockMessageHeaderAuth_IV_Call {
	return &MockMessageHeaderAuth_IV_Call{Call: _e.mock.On("IV")}
}

func (_c *MockMessageHeaderAuth_IV_Call) Run(run func()) *MockMessageHeaderAuth_IV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageHeaderAuth_IV_Call) Return(_a0 []byte) *MockMessageHeaderAuth_IV_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageHeaderAuth_IV_Call) RunAndReturn(run func() []byte) *MockMessageHeaderAuth_IV_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *MockMessageHeaderAuth) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockMessageHeaderAuth_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockMessageHeaderAuth_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockMessageHeaderAuth_Expecter) Len() *MockMessageHeaderAuth_Len_Call {
	return &MockMessageHeaderAuth_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockMessageHeaderAuth_Len_Call) Run(run func()) *MockMessageHeaderAuth_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageHeaderAuth_Len_Call) Return(_a0 int) *MockMessageHeaderAuth_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageHeaderAuth_Len_Call) RunAndReturn(run func() int) *MockMessageHeaderAuth_Len_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageHeaderAuth creates a new instance of MockMessageHeaderAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageHeaderAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageHeaderAuth {
	mock := &MockMessageHeaderAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
