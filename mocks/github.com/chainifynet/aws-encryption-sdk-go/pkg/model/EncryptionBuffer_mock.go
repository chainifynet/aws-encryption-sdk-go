// Code generated by mockery v2.38.0. DO NOT EDIT.

//go:build mocks

package model

import mock "github.com/stretchr/testify/mock"

// MockEncryptionBuffer is an autogenerated mock type for the EncryptionBuffer type
type MockEncryptionBuffer struct {
	mock.Mock
}

type MockEncryptionBuffer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionBuffer) EXPECT() *MockEncryptionBuffer_Expecter {
	return &MockEncryptionBuffer_Expecter{mock: &_m.Mock}
}

// Bytes provides a mock function with given fields:
func (_m *MockEncryptionBuffer) Bytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockEncryptionBuffer_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockEncryptionBuffer_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockEncryptionBuffer_Expecter) Bytes() *MockEncryptionBuffer_Bytes_Call {
	return &MockEncryptionBuffer_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockEncryptionBuffer_Bytes_Call) Run(run func()) *MockEncryptionBuffer_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionBuffer_Bytes_Call) Return(_a0 []byte) *MockEncryptionBuffer_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionBuffer_Bytes_Call) RunAndReturn(run func() []byte) *MockEncryptionBuffer_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *MockEncryptionBuffer) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockEncryptionBuffer_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockEncryptionBuffer_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockEncryptionBuffer_Expecter) Len() *MockEncryptionBuffer_Len_Call {
	return &MockEncryptionBuffer_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockEncryptionBuffer_Len_Call) Run(run func()) *MockEncryptionBuffer_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionBuffer_Len_Call) Return(_a0 int) *MockEncryptionBuffer_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionBuffer_Len_Call) RunAndReturn(run func() int) *MockEncryptionBuffer_Len_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *MockEncryptionBuffer) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionBuffer_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockEncryptionBuffer_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *MockEncryptionBuffer_Expecter) Read(p interface{}) *MockEncryptionBuffer_Read_Call {
	return &MockEncryptionBuffer_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *MockEncryptionBuffer_Read_Call) Run(run func(p []byte)) *MockEncryptionBuffer_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockEncryptionBuffer_Read_Call) Return(n int, err error) *MockEncryptionBuffer_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEncryptionBuffer_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MockEncryptionBuffer_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *MockEncryptionBuffer) Reset() {
	_m.Called()
}

// MockEncryptionBuffer_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockEncryptionBuffer_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockEncryptionBuffer_Expecter) Reset() *MockEncryptionBuffer_Reset_Call {
	return &MockEncryptionBuffer_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockEncryptionBuffer_Reset_Call) Run(run func()) *MockEncryptionBuffer_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionBuffer_Reset_Call) Return() *MockEncryptionBuffer_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEncryptionBuffer_Reset_Call) RunAndReturn(run func()) *MockEncryptionBuffer_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *MockEncryptionBuffer) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionBuffer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockEncryptionBuffer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *MockEncryptionBuffer_Expecter) Write(p interface{}) *MockEncryptionBuffer_Write_Call {
	return &MockEncryptionBuffer_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *MockEncryptionBuffer_Write_Call) Run(run func(p []byte)) *MockEncryptionBuffer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockEncryptionBuffer_Write_Call) Return(n int, err error) *MockEncryptionBuffer_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEncryptionBuffer_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockEncryptionBuffer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptionBuffer creates a new instance of MockEncryptionBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionBuffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionBuffer {
	mock := &MockEncryptionBuffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
