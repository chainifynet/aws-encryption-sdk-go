// Code generated by mockery. DO NOT EDIT.

//go:build mocks

package model

import mock "github.com/stretchr/testify/mock"

// MockWrapper is an autogenerated mock type for the Wrapper type
type MockWrapper struct {
	mock.Mock
}

type MockWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWrapper) EXPECT() *MockWrapper_Expecter {
	return &MockWrapper_Expecter{mock: &_m.Mock}
}

// DeserializeEncryptedDataKey provides a mock function with given fields: b, iVLen
func (_m *MockWrapper) DeserializeEncryptedDataKey(b []byte, iVLen int) ([]byte, []byte) {
	ret := _m.Called(b, iVLen)

	if len(ret) == 0 {
		panic("no return value specified for DeserializeEncryptedDataKey")
	}

	var r0 []byte
	var r1 []byte
	if rf, ok := ret.Get(0).(func([]byte, int) ([]byte, []byte)); ok {
		return rf(b, iVLen)
	}
	if rf, ok := ret.Get(0).(func([]byte, int) []byte); ok {
		r0 = rf(b, iVLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, int) []byte); ok {
		r1 = rf(b, iVLen)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	return r0, r1
}

// MockWrapper_DeserializeEncryptedDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeserializeEncryptedDataKey'
type MockWrapper_DeserializeEncryptedDataKey_Call struct {
	*mock.Call
}

// DeserializeEncryptedDataKey is a helper method to define mock.On call
//   - b []byte
//   - iVLen int
func (_e *MockWrapper_Expecter) DeserializeEncryptedDataKey(b interface{}, iVLen interface{}) *MockWrapper_DeserializeEncryptedDataKey_Call {
	return &MockWrapper_DeserializeEncryptedDataKey_Call{Call: _e.mock.On("DeserializeEncryptedDataKey", b, iVLen)}
}

func (_c *MockWrapper_DeserializeEncryptedDataKey_Call) Run(run func(b []byte, iVLen int)) *MockWrapper_DeserializeEncryptedDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int))
	})
	return _c
}

func (_c *MockWrapper_DeserializeEncryptedDataKey_Call) Return(encryptedData []byte, iv []byte) *MockWrapper_DeserializeEncryptedDataKey_Call {
	_c.Call.Return(encryptedData, iv)
	return _c
}

func (_c *MockWrapper_DeserializeEncryptedDataKey_Call) RunAndReturn(run func([]byte, int) ([]byte, []byte)) *MockWrapper_DeserializeEncryptedDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// SerializeEncryptedDataKey provides a mock function with given fields: encryptedKey, tag, iv
func (_m *MockWrapper) SerializeEncryptedDataKey(encryptedKey []byte, tag []byte, iv []byte) []byte {
	ret := _m.Called(encryptedKey, tag, iv)

	if len(ret) == 0 {
		panic("no return value specified for SerializeEncryptedDataKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) []byte); ok {
		r0 = rf(encryptedKey, tag, iv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockWrapper_SerializeEncryptedDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerializeEncryptedDataKey'
type MockWrapper_SerializeEncryptedDataKey_Call struct {
	*mock.Call
}

// SerializeEncryptedDataKey is a helper method to define mock.On call
//   - encryptedKey []byte
//   - tag []byte
//   - iv []byte
func (_e *MockWrapper_Expecter) SerializeEncryptedDataKey(encryptedKey interface{}, tag interface{}, iv interface{}) *MockWrapper_SerializeEncryptedDataKey_Call {
	return &MockWrapper_SerializeEncryptedDataKey_Call{Call: _e.mock.On("SerializeEncryptedDataKey", encryptedKey, tag, iv)}
}

func (_c *MockWrapper_SerializeEncryptedDataKey_Call) Run(run func(encryptedKey []byte, tag []byte, iv []byte)) *MockWrapper_SerializeEncryptedDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockWrapper_SerializeEncryptedDataKey_Call) Return(_a0 []byte) *MockWrapper_SerializeEncryptedDataKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrapper_SerializeEncryptedDataKey_Call) RunAndReturn(run func([]byte, []byte, []byte) []byte) *MockWrapper_SerializeEncryptedDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// SerializeKeyInfoPrefix provides a mock function with given fields: keyID
func (_m *MockWrapper) SerializeKeyInfoPrefix(keyID string) []byte {
	ret := _m.Called(keyID)

	if len(ret) == 0 {
		panic("no return value specified for SerializeKeyInfoPrefix")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockWrapper_SerializeKeyInfoPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerializeKeyInfoPrefix'
type MockWrapper_SerializeKeyInfoPrefix_Call struct {
	*mock.Call
}

// SerializeKeyInfoPrefix is a helper method to define mock.On call
//   - keyID string
func (_e *MockWrapper_Expecter) SerializeKeyInfoPrefix(keyID interface{}) *MockWrapper_SerializeKeyInfoPrefix_Call {
	return &MockWrapper_SerializeKeyInfoPrefix_Call{Call: _e.mock.On("SerializeKeyInfoPrefix", keyID)}
}

func (_c *MockWrapper_SerializeKeyInfoPrefix_Call) Run(run func(keyID string)) *MockWrapper_SerializeKeyInfoPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWrapper_SerializeKeyInfoPrefix_Call) Return(_a0 []byte) *MockWrapper_SerializeKeyInfoPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrapper_SerializeKeyInfoPrefix_Call) RunAndReturn(run func(string) []byte) *MockWrapper_SerializeKeyInfoPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWrapper creates a new instance of MockWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWrapper {
	mock := &MockWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
