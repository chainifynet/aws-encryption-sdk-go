// Code generated by mockery v2.38.0. DO NOT EDIT.

//go:build mocks

package model

import (
	context "context"

	model "github.com/chainifynet/aws-encryption-sdk-go/pkg/model"
	mock "github.com/stretchr/testify/mock"

	suite "github.com/chainifynet/aws-encryption-sdk-go/pkg/suite"

	types "github.com/chainifynet/aws-encryption-sdk-go/pkg/model/types"
)

// MockKeyProvider is an autogenerated mock type for the BaseKeyProvider type
type MockKeyProvider struct {
	mock.Mock
}

type MockKeyProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyProvider) EXPECT() *MockKeyProvider_Expecter {
	return &MockKeyProvider_Expecter{mock: &_m.Mock}
}

// DecryptDataKey provides a mock function with given fields: ctx, MKP, encryptedDataKey, alg, ec
func (_m *MockKeyProvider) DecryptDataKey(ctx context.Context, MKP model.MasterKeyProvider, encryptedDataKey model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext) (model.DataKeyI, error) {
	ret := _m.Called(ctx, MKP, encryptedDataKey, alg, ec)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKey")
	}

	var r0 model.DataKeyI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MasterKeyProvider, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)); ok {
		return rf(ctx, MKP, encryptedDataKey, alg, ec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.MasterKeyProvider, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) model.DataKeyI); ok {
		r0 = rf(ctx, MKP, encryptedDataKey, alg, ec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.DataKeyI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.MasterKeyProvider, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) error); ok {
		r1 = rf(ctx, MKP, encryptedDataKey, alg, ec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyProvider_DecryptDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKey'
type MockKeyProvider_DecryptDataKey_Call struct {
	*mock.Call
}

// DecryptDataKey is a helper method to define mock.On call
//   - ctx context.Context
//   - MKP model.MasterKeyProvider
//   - encryptedDataKey model.EncryptedDataKeyI
//   - alg *suite.AlgorithmSuite
//   - ec suite.EncryptionContext
func (_e *MockKeyProvider_Expecter) DecryptDataKey(ctx interface{}, MKP interface{}, encryptedDataKey interface{}, alg interface{}, ec interface{}) *MockKeyProvider_DecryptDataKey_Call {
	return &MockKeyProvider_DecryptDataKey_Call{Call: _e.mock.On("DecryptDataKey", ctx, MKP, encryptedDataKey, alg, ec)}
}

func (_c *MockKeyProvider_DecryptDataKey_Call) Run(run func(ctx context.Context, MKP model.MasterKeyProvider, encryptedDataKey model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext)) *MockKeyProvider_DecryptDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.MasterKeyProvider), args[2].(model.EncryptedDataKeyI), args[3].(*suite.AlgorithmSuite), args[4].(suite.EncryptionContext))
	})
	return _c
}

func (_c *MockKeyProvider_DecryptDataKey_Call) Return(_a0 model.DataKeyI, _a1 error) *MockKeyProvider_DecryptDataKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyProvider_DecryptDataKey_Call) RunAndReturn(run func(context.Context, model.MasterKeyProvider, model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)) *MockKeyProvider_DecryptDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptDataKeyFromList provides a mock function with given fields: ctx, MKP, encryptedDataKeys, alg, ec
func (_m *MockKeyProvider) DecryptDataKeyFromList(ctx context.Context, MKP model.MasterKeyProvider, encryptedDataKeys []model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext) (model.DataKeyI, error) {
	ret := _m.Called(ctx, MKP, encryptedDataKeys, alg, ec)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKeyFromList")
	}

	var r0 model.DataKeyI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MasterKeyProvider, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)); ok {
		return rf(ctx, MKP, encryptedDataKeys, alg, ec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.MasterKeyProvider, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) model.DataKeyI); ok {
		r0 = rf(ctx, MKP, encryptedDataKeys, alg, ec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.DataKeyI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.MasterKeyProvider, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) error); ok {
		r1 = rf(ctx, MKP, encryptedDataKeys, alg, ec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyProvider_DecryptDataKeyFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKeyFromList'
type MockKeyProvider_DecryptDataKeyFromList_Call struct {
	*mock.Call
}

// DecryptDataKeyFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - MKP model.MasterKeyProvider
//   - encryptedDataKeys []model.EncryptedDataKeyI
//   - alg *suite.AlgorithmSuite
//   - ec suite.EncryptionContext
func (_e *MockKeyProvider_Expecter) DecryptDataKeyFromList(ctx interface{}, MKP interface{}, encryptedDataKeys interface{}, alg interface{}, ec interface{}) *MockKeyProvider_DecryptDataKeyFromList_Call {
	return &MockKeyProvider_DecryptDataKeyFromList_Call{Call: _e.mock.On("DecryptDataKeyFromList", ctx, MKP, encryptedDataKeys, alg, ec)}
}

func (_c *MockKeyProvider_DecryptDataKeyFromList_Call) Run(run func(ctx context.Context, MKP model.MasterKeyProvider, encryptedDataKeys []model.EncryptedDataKeyI, alg *suite.AlgorithmSuite, ec suite.EncryptionContext)) *MockKeyProvider_DecryptDataKeyFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.MasterKeyProvider), args[2].([]model.EncryptedDataKeyI), args[3].(*suite.AlgorithmSuite), args[4].(suite.EncryptionContext))
	})
	return _c
}

func (_c *MockKeyProvider_DecryptDataKeyFromList_Call) Return(_a0 model.DataKeyI, _a1 error) *MockKeyProvider_DecryptDataKeyFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyProvider_DecryptDataKeyFromList_Call) RunAndReturn(run func(context.Context, model.MasterKeyProvider, []model.EncryptedDataKeyI, *suite.AlgorithmSuite, suite.EncryptionContext) (model.DataKeyI, error)) *MockKeyProvider_DecryptDataKeyFromList_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *MockKeyProvider) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockKeyProvider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockKeyProvider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockKeyProvider_Expecter) ID() *MockKeyProvider_ID_Call {
	return &MockKeyProvider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockKeyProvider_ID_Call) Run(run func()) *MockKeyProvider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyProvider_ID_Call) Return(_a0 string) *MockKeyProvider_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyProvider_ID_Call) RunAndReturn(run func() string) *MockKeyProvider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Kind provides a mock function with given fields:
func (_m *MockKeyProvider) Kind() types.ProviderKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Kind")
	}

	var r0 types.ProviderKind
	if rf, ok := ret.Get(0).(func() types.ProviderKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ProviderKind)
	}

	return r0
}

// MockKeyProvider_Kind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kind'
type MockKeyProvider_Kind_Call struct {
	*mock.Call
}

// Kind is a helper method to define mock.On call
func (_e *MockKeyProvider_Expecter) Kind() *MockKeyProvider_Kind_Call {
	return &MockKeyProvider_Kind_Call{Call: _e.mock.On("Kind")}
}

func (_c *MockKeyProvider_Kind_Call) Run(run func()) *MockKeyProvider_Kind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyProvider_Kind_Call) Return(_a0 types.ProviderKind) *MockKeyProvider_Kind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyProvider_Kind_Call) RunAndReturn(run func() types.ProviderKind) *MockKeyProvider_Kind_Call {
	_c.Call.Return(run)
	return _c
}

// VendOnDecrypt provides a mock function with given fields:
func (_m *MockKeyProvider) VendOnDecrypt() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VendOnDecrypt")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeyProvider_VendOnDecrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VendOnDecrypt'
type MockKeyProvider_VendOnDecrypt_Call struct {
	*mock.Call
}

// VendOnDecrypt is a helper method to define mock.On call
func (_e *MockKeyProvider_Expecter) VendOnDecrypt() *MockKeyProvider_VendOnDecrypt_Call {
	return &MockKeyProvider_VendOnDecrypt_Call{Call: _e.mock.On("VendOnDecrypt")}
}

func (_c *MockKeyProvider_VendOnDecrypt_Call) Run(run func()) *MockKeyProvider_VendOnDecrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyProvider_VendOnDecrypt_Call) Return(_a0 bool) *MockKeyProvider_VendOnDecrypt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyProvider_VendOnDecrypt_Call) RunAndReturn(run func() bool) *MockKeyProvider_VendOnDecrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyProvider creates a new instance of MockKeyProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyProvider {
	mock := &MockKeyProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
