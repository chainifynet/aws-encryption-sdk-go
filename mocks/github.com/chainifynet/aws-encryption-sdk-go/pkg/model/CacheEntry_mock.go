// Code generated by mockery. DO NOT EDIT.

//go:build mocks

package model

import mock "github.com/stretchr/testify/mock"

// MockCacheEntry is an autogenerated mock type for the CacheEntry type
type MockCacheEntry struct {
	mock.Mock
}

type MockCacheEntry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheEntry) EXPECT() *MockCacheEntry_Expecter {
	return &MockCacheEntry_Expecter{mock: &_m.Mock}
}

// Age provides a mock function with given fields:
func (_m *MockCacheEntry) Age() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Age")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockCacheEntry_Age_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Age'
type MockCacheEntry_Age_Call struct {
	*mock.Call
}

// Age is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) Age() *MockCacheEntry_Age_Call {
	return &MockCacheEntry_Age_Call{Call: _e.mock.On("Age")}
}

func (_c *MockCacheEntry_Age_Call) Run(run func()) *MockCacheEntry_Age_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_Age_Call) Return(_a0 float64) *MockCacheEntry_Age_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_Age_Call) RunAndReturn(run func() float64) *MockCacheEntry_Age_Call {
	_c.Call.Return(run)
	return _c
}

// Bytes provides a mock function with given fields:
func (_m *MockCacheEntry) Bytes() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCacheEntry_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockCacheEntry_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) Bytes() *MockCacheEntry_Bytes_Call {
	return &MockCacheEntry_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockCacheEntry_Bytes_Call) Run(run func()) *MockCacheEntry_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_Bytes_Call) Return(_a0 uint64) *MockCacheEntry_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_Bytes_Call) RunAndReturn(run func() uint64) *MockCacheEntry_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// Invalidate provides a mock function with given fields:
func (_m *MockCacheEntry) Invalidate() {
	_m.Called()
}

// MockCacheEntry_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type MockCacheEntry_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) Invalidate() *MockCacheEntry_Invalidate_Call {
	return &MockCacheEntry_Invalidate_Call{Call: _e.mock.On("Invalidate")}
}

func (_c *MockCacheEntry_Invalidate_Call) Run(run func()) *MockCacheEntry_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_Invalidate_Call) Return() *MockCacheEntry_Invalidate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheEntry_Invalidate_Call) RunAndReturn(run func()) *MockCacheEntry_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// IsTooOld provides a mock function with given fields:
func (_m *MockCacheEntry) IsTooOld() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTooOld")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCacheEntry_IsTooOld_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTooOld'
type MockCacheEntry_IsTooOld_Call struct {
	*mock.Call
}

// IsTooOld is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) IsTooOld() *MockCacheEntry_IsTooOld_Call {
	return &MockCacheEntry_IsTooOld_Call{Call: _e.mock.On("IsTooOld")}
}

func (_c *MockCacheEntry_IsTooOld_Call) Run(run func()) *MockCacheEntry_IsTooOld_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_IsTooOld_Call) Return(_a0 bool) *MockCacheEntry_IsTooOld_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_IsTooOld_Call) RunAndReturn(run func() bool) *MockCacheEntry_IsTooOld_Call {
	_c.Call.Return(run)
	return _c
}

// IsValid provides a mock function with given fields:
func (_m *MockCacheEntry) IsValid() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCacheEntry_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type MockCacheEntry_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) IsValid() *MockCacheEntry_IsValid_Call {
	return &MockCacheEntry_IsValid_Call{Call: _e.mock.On("IsValid")}
}

func (_c *MockCacheEntry_IsValid_Call) Run(run func()) *MockCacheEntry_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_IsValid_Call) Return(_a0 bool) *MockCacheEntry_IsValid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_IsValid_Call) RunAndReturn(run func() bool) *MockCacheEntry_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with given fields:
func (_m *MockCacheEntry) Key() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCacheEntry_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockCacheEntry_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) Key() *MockCacheEntry_Key_Call {
	return &MockCacheEntry_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockCacheEntry_Key_Call) Run(run func()) *MockCacheEntry_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_Key_Call) Return(_a0 string) *MockCacheEntry_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_Key_Call) RunAndReturn(run func() string) *MockCacheEntry_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields:
func (_m *MockCacheEntry) Messages() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCacheEntry_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type MockCacheEntry_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) Messages() *MockCacheEntry_Messages_Call {
	return &MockCacheEntry_Messages_Call{Call: _e.mock.On("Messages")}
}

func (_c *MockCacheEntry_Messages_Call) Run(run func()) *MockCacheEntry_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_Messages_Call) Return(_a0 uint64) *MockCacheEntry_Messages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_Messages_Call) RunAndReturn(run func() uint64) *MockCacheEntry_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMeta provides a mock function with given fields: b
func (_m *MockCacheEntry) UpdateMeta(b int) {
	_m.Called(b)
}

// MockCacheEntry_UpdateMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMeta'
type MockCacheEntry_UpdateMeta_Call struct {
	*mock.Call
}

// UpdateMeta is a helper method to define mock.On call
//   - b int
func (_e *MockCacheEntry_Expecter) UpdateMeta(b interface{}) *MockCacheEntry_UpdateMeta_Call {
	return &MockCacheEntry_UpdateMeta_Call{Call: _e.mock.On("UpdateMeta", b)}
}

func (_c *MockCacheEntry_UpdateMeta_Call) Run(run func(b int)) *MockCacheEntry_UpdateMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCacheEntry_UpdateMeta_Call) Return() *MockCacheEntry_UpdateMeta_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheEntry_UpdateMeta_Call) RunAndReturn(run func(int)) *MockCacheEntry_UpdateMeta_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *MockCacheEntry) Value() any {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if rf, ok := ret.Get(0).(func() any); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// MockCacheEntry_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockCacheEntry_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockCacheEntry_Expecter) Value() *MockCacheEntry_Value_Call {
	return &MockCacheEntry_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockCacheEntry_Value_Call) Run(run func()) *MockCacheEntry_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheEntry_Value_Call) Return(_a0 any) *MockCacheEntry_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheEntry_Value_Call) RunAndReturn(run func() any) *MockCacheEntry_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheEntry creates a new instance of MockCacheEntry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheEntry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheEntry {
	mock := &MockCacheEntry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
