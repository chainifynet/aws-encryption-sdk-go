// Code generated by mockery v2.38.0. DO NOT EDIT.

//go:build mocks

package model

import (
	context "context"

	model "github.com/chainifynet/aws-encryption-sdk-go/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCryptoMaterialsManager is an autogenerated mock type for the CryptoMaterialsManager type
type MockCryptoMaterialsManager struct {
	mock.Mock
}

type MockCryptoMaterialsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCryptoMaterialsManager) EXPECT() *MockCryptoMaterialsManager_Expecter {
	return &MockCryptoMaterialsManager_Expecter{mock: &_m.Mock}
}

// DecryptMaterials provides a mock function with given fields: ctx, request
func (_m *MockCryptoMaterialsManager) DecryptMaterials(ctx context.Context, request model.DecryptionMaterialsRequest) (model.DecryptionMaterial, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DecryptMaterials")
	}

	var r0 model.DecryptionMaterial
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DecryptionMaterialsRequest) (model.DecryptionMaterial, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.DecryptionMaterialsRequest) model.DecryptionMaterial); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.DecryptionMaterial)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.DecryptionMaterialsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoMaterialsManager_DecryptMaterials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptMaterials'
type MockCryptoMaterialsManager_DecryptMaterials_Call struct {
	*mock.Call
}

// DecryptMaterials is a helper method to define mock.On call
//   - ctx context.Context
//   - request model.DecryptionMaterialsRequest
func (_e *MockCryptoMaterialsManager_Expecter) DecryptMaterials(ctx interface{}, request interface{}) *MockCryptoMaterialsManager_DecryptMaterials_Call {
	return &MockCryptoMaterialsManager_DecryptMaterials_Call{Call: _e.mock.On("DecryptMaterials", ctx, request)}
}

func (_c *MockCryptoMaterialsManager_DecryptMaterials_Call) Run(run func(ctx context.Context, request model.DecryptionMaterialsRequest)) *MockCryptoMaterialsManager_DecryptMaterials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.DecryptionMaterialsRequest))
	})
	return _c
}

func (_c *MockCryptoMaterialsManager_DecryptMaterials_Call) Return(_a0 model.DecryptionMaterial, _a1 error) *MockCryptoMaterialsManager_DecryptMaterials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoMaterialsManager_DecryptMaterials_Call) RunAndReturn(run func(context.Context, model.DecryptionMaterialsRequest) (model.DecryptionMaterial, error)) *MockCryptoMaterialsManager_DecryptMaterials_Call {
	_c.Call.Return(run)
	return _c
}

// GetEncryptionMaterials provides a mock function with given fields: ctx, request
func (_m *MockCryptoMaterialsManager) GetEncryptionMaterials(ctx context.Context, request model.EncryptionMaterialsRequest) (model.EncryptionMaterial, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetEncryptionMaterials")
	}

	var r0 model.EncryptionMaterial
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.EncryptionMaterialsRequest) (model.EncryptionMaterial, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.EncryptionMaterialsRequest) model.EncryptionMaterial); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.EncryptionMaterial)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.EncryptionMaterialsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoMaterialsManager_GetEncryptionMaterials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEncryptionMaterials'
type MockCryptoMaterialsManager_GetEncryptionMaterials_Call struct {
	*mock.Call
}

// GetEncryptionMaterials is a helper method to define mock.On call
//   - ctx context.Context
//   - request model.EncryptionMaterialsRequest
func (_e *MockCryptoMaterialsManager_Expecter) GetEncryptionMaterials(ctx interface{}, request interface{}) *MockCryptoMaterialsManager_GetEncryptionMaterials_Call {
	return &MockCryptoMaterialsManager_GetEncryptionMaterials_Call{Call: _e.mock.On("GetEncryptionMaterials", ctx, request)}
}

func (_c *MockCryptoMaterialsManager_GetEncryptionMaterials_Call) Run(run func(ctx context.Context, request model.EncryptionMaterialsRequest)) *MockCryptoMaterialsManager_GetEncryptionMaterials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.EncryptionMaterialsRequest))
	})
	return _c
}

func (_c *MockCryptoMaterialsManager_GetEncryptionMaterials_Call) Return(_a0 model.EncryptionMaterial, _a1 error) *MockCryptoMaterialsManager_GetEncryptionMaterials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoMaterialsManager_GetEncryptionMaterials_Call) RunAndReturn(run func(context.Context, model.EncryptionMaterialsRequest) (model.EncryptionMaterial, error)) *MockCryptoMaterialsManager_GetEncryptionMaterials_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstance provides a mock function with given fields:
func (_m *MockCryptoMaterialsManager) GetInstance() model.CryptoMaterialsManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 model.CryptoMaterialsManager
	if rf, ok := ret.Get(0).(func() model.CryptoMaterialsManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CryptoMaterialsManager)
		}
	}

	return r0
}

// MockCryptoMaterialsManager_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type MockCryptoMaterialsManager_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
func (_e *MockCryptoMaterialsManager_Expecter) GetInstance() *MockCryptoMaterialsManager_GetInstance_Call {
	return &MockCryptoMaterialsManager_GetInstance_Call{Call: _e.mock.On("GetInstance")}
}

func (_c *MockCryptoMaterialsManager_GetInstance_Call) Run(run func()) *MockCryptoMaterialsManager_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCryptoMaterialsManager_GetInstance_Call) Return(_a0 model.CryptoMaterialsManager) *MockCryptoMaterialsManager_GetInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCryptoMaterialsManager_GetInstance_Call) RunAndReturn(run func() model.CryptoMaterialsManager) *MockCryptoMaterialsManager_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCryptoMaterialsManager creates a new instance of MockCryptoMaterialsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCryptoMaterialsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCryptoMaterialsManager {
	mock := &MockCryptoMaterialsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
