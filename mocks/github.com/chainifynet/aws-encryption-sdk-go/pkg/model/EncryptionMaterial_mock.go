// Code generated by mockery v2.42.0. DO NOT EDIT.

//go:build mocks

package model

import (
	ecdsa "crypto/ecdsa"

	model "github.com/chainifynet/aws-encryption-sdk-go/pkg/model"
	mock "github.com/stretchr/testify/mock"

	suite "github.com/chainifynet/aws-encryption-sdk-go/pkg/suite"
)

// MockEncryptionMaterial is an autogenerated mock type for the EncryptionMaterial type
type MockEncryptionMaterial struct {
	mock.Mock
}

type MockEncryptionMaterial_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionMaterial) EXPECT() *MockEncryptionMaterial_Expecter {
	return &MockEncryptionMaterial_Expecter{mock: &_m.Mock}
}

// DataEncryptionKey provides a mock function with given fields:
func (_m *MockEncryptionMaterial) DataEncryptionKey() model.DataKeyI {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataEncryptionKey")
	}

	var r0 model.DataKeyI
	if rf, ok := ret.Get(0).(func() model.DataKeyI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.DataKeyI)
		}
	}

	return r0
}

// MockEncryptionMaterial_DataEncryptionKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataEncryptionKey'
type MockEncryptionMaterial_DataEncryptionKey_Call struct {
	*mock.Call
}

// DataEncryptionKey is a helper method to define mock.On call
func (_e *MockEncryptionMaterial_Expecter) DataEncryptionKey() *MockEncryptionMaterial_DataEncryptionKey_Call {
	return &MockEncryptionMaterial_DataEncryptionKey_Call{Call: _e.mock.On("DataEncryptionKey")}
}

func (_c *MockEncryptionMaterial_DataEncryptionKey_Call) Run(run func()) *MockEncryptionMaterial_DataEncryptionKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionMaterial_DataEncryptionKey_Call) Return(_a0 model.DataKeyI) *MockEncryptionMaterial_DataEncryptionKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionMaterial_DataEncryptionKey_Call) RunAndReturn(run func() model.DataKeyI) *MockEncryptionMaterial_DataEncryptionKey_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptedDataKeys provides a mock function with given fields:
func (_m *MockEncryptionMaterial) EncryptedDataKeys() []model.EncryptedDataKeyI {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EncryptedDataKeys")
	}

	var r0 []model.EncryptedDataKeyI
	if rf, ok := ret.Get(0).(func() []model.EncryptedDataKeyI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.EncryptedDataKeyI)
		}
	}

	return r0
}

// MockEncryptionMaterial_EncryptedDataKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptedDataKeys'
type MockEncryptionMaterial_EncryptedDataKeys_Call struct {
	*mock.Call
}

// EncryptedDataKeys is a helper method to define mock.On call
func (_e *MockEncryptionMaterial_Expecter) EncryptedDataKeys() *MockEncryptionMaterial_EncryptedDataKeys_Call {
	return &MockEncryptionMaterial_EncryptedDataKeys_Call{Call: _e.mock.On("EncryptedDataKeys")}
}

func (_c *MockEncryptionMaterial_EncryptedDataKeys_Call) Run(run func()) *MockEncryptionMaterial_EncryptedDataKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionMaterial_EncryptedDataKeys_Call) Return(_a0 []model.EncryptedDataKeyI) *MockEncryptionMaterial_EncryptedDataKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionMaterial_EncryptedDataKeys_Call) RunAndReturn(run func() []model.EncryptedDataKeyI) *MockEncryptionMaterial_EncryptedDataKeys_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptionContext provides a mock function with given fields:
func (_m *MockEncryptionMaterial) EncryptionContext() suite.EncryptionContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EncryptionContext")
	}

	var r0 suite.EncryptionContext
	if rf, ok := ret.Get(0).(func() suite.EncryptionContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(suite.EncryptionContext)
		}
	}

	return r0
}

// MockEncryptionMaterial_EncryptionContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptionContext'
type MockEncryptionMaterial_EncryptionContext_Call struct {
	*mock.Call
}

// EncryptionContext is a helper method to define mock.On call
func (_e *MockEncryptionMaterial_Expecter) EncryptionContext() *MockEncryptionMaterial_EncryptionContext_Call {
	return &MockEncryptionMaterial_EncryptionContext_Call{Call: _e.mock.On("EncryptionContext")}
}

func (_c *MockEncryptionMaterial_EncryptionContext_Call) Run(run func()) *MockEncryptionMaterial_EncryptionContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionMaterial_EncryptionContext_Call) Return(_a0 suite.EncryptionContext) *MockEncryptionMaterial_EncryptionContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionMaterial_EncryptionContext_Call) RunAndReturn(run func() suite.EncryptionContext) *MockEncryptionMaterial_EncryptionContext_Call {
	_c.Call.Return(run)
	return _c
}

// SigningKey provides a mock function with given fields:
func (_m *MockEncryptionMaterial) SigningKey() *ecdsa.PrivateKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SigningKey")
	}

	var r0 *ecdsa.PrivateKey
	if rf, ok := ret.Get(0).(func() *ecdsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	return r0
}

// MockEncryptionMaterial_SigningKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SigningKey'
type MockEncryptionMaterial_SigningKey_Call struct {
	*mock.Call
}

// SigningKey is a helper method to define mock.On call
func (_e *MockEncryptionMaterial_Expecter) SigningKey() *MockEncryptionMaterial_SigningKey_Call {
	return &MockEncryptionMaterial_SigningKey_Call{Call: _e.mock.On("SigningKey")}
}

func (_c *MockEncryptionMaterial_SigningKey_Call) Run(run func()) *MockEncryptionMaterial_SigningKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionMaterial_SigningKey_Call) Return(_a0 *ecdsa.PrivateKey) *MockEncryptionMaterial_SigningKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionMaterial_SigningKey_Call) RunAndReturn(run func() *ecdsa.PrivateKey) *MockEncryptionMaterial_SigningKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptionMaterial creates a new instance of MockEncryptionMaterial. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionMaterial(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionMaterial {
	mock := &MockEncryptionMaterial{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
