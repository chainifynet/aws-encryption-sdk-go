// Code generated by mockery v2.49.1. DO NOT EDIT.

//go:build mocks

package model

import (
	model "github.com/chainifynet/aws-encryption-sdk-go/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockEncryptedDataKey is an autogenerated mock type for the EncryptedDataKeyI type
type MockEncryptedDataKey struct {
	mock.Mock
}

type MockEncryptedDataKey_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptedDataKey) EXPECT() *MockEncryptedDataKey_Expecter {
	return &MockEncryptedDataKey_Expecter{mock: &_m.Mock}
}

// EncryptedDataKey provides a mock function with given fields:
func (_m *MockEncryptedDataKey) EncryptedDataKey() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EncryptedDataKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockEncryptedDataKey_EncryptedDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptedDataKey'
type MockEncryptedDataKey_EncryptedDataKey_Call struct {
	*mock.Call
}

// EncryptedDataKey is a helper method to define mock.On call
func (_e *MockEncryptedDataKey_Expecter) EncryptedDataKey() *MockEncryptedDataKey_EncryptedDataKey_Call {
	return &MockEncryptedDataKey_EncryptedDataKey_Call{Call: _e.mock.On("EncryptedDataKey")}
}

func (_c *MockEncryptedDataKey_EncryptedDataKey_Call) Run(run func()) *MockEncryptedDataKey_EncryptedDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptedDataKey_EncryptedDataKey_Call) Return(_a0 []byte) *MockEncryptedDataKey_EncryptedDataKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptedDataKey_EncryptedDataKey_Call) RunAndReturn(run func() []byte) *MockEncryptedDataKey_EncryptedDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// KeyID provides a mock function with given fields:
func (_m *MockEncryptedDataKey) KeyID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEncryptedDataKey_KeyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyID'
type MockEncryptedDataKey_KeyID_Call struct {
	*mock.Call
}

// KeyID is a helper method to define mock.On call
func (_e *MockEncryptedDataKey_Expecter) KeyID() *MockEncryptedDataKey_KeyID_Call {
	return &MockEncryptedDataKey_KeyID_Call{Call: _e.mock.On("KeyID")}
}

func (_c *MockEncryptedDataKey_KeyID_Call) Run(run func()) *MockEncryptedDataKey_KeyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptedDataKey_KeyID_Call) Return(_a0 string) *MockEncryptedDataKey_KeyID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptedDataKey_KeyID_Call) RunAndReturn(run func() string) *MockEncryptedDataKey_KeyID_Call {
	_c.Call.Return(run)
	return _c
}

// KeyProvider provides a mock function with given fields:
func (_m *MockEncryptedDataKey) KeyProvider() model.KeyMeta {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyProvider")
	}

	var r0 model.KeyMeta
	if rf, ok := ret.Get(0).(func() model.KeyMeta); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.KeyMeta)
	}

	return r0
}

// MockEncryptedDataKey_KeyProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyProvider'
type MockEncryptedDataKey_KeyProvider_Call struct {
	*mock.Call
}

// KeyProvider is a helper method to define mock.On call
func (_e *MockEncryptedDataKey_Expecter) KeyProvider() *MockEncryptedDataKey_KeyProvider_Call {
	return &MockEncryptedDataKey_KeyProvider_Call{Call: _e.mock.On("KeyProvider")}
}

func (_c *MockEncryptedDataKey_KeyProvider_Call) Run(run func()) *MockEncryptedDataKey_KeyProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptedDataKey_KeyProvider_Call) Return(_a0 model.KeyMeta) *MockEncryptedDataKey_KeyProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptedDataKey_KeyProvider_Call) RunAndReturn(run func() model.KeyMeta) *MockEncryptedDataKey_KeyProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptedDataKey creates a new instance of MockEncryptedDataKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptedDataKey(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptedDataKey {
	mock := &MockEncryptedDataKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
